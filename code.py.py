# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b_L5Muvp1HV5_4r6GFxE_G5idwopOoBT
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix,accuracy_score,ConfusionMatrixDisplay
import matplotlib.pyplot as plt
data = pd.read_csv('winequality-white.csv', sep=';')
print(data.head())

def quality_label(q):
    if q <= 4:
        return 'Bad'
    elif q <= 6:
        return 'Average'
    else:
        return 'Good'

data['quality_label'] = data['quality'].apply(quality_label)
label_map = {'Bad': 0, 'Average': 1, 'Good': 2}
data['label'] = data['quality_label'].map(label_map)
print(label_map)
X = data.drop(['quality', 'quality_label', 'label'], axis=1)
y = data['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred =model.predict(X_test)
print("Classification Report:\n", classification_report(y_test, y_pred, target_names=['Bad', 'Average', 'Good']))
cm = confusion_matrix(y_test, y_pred)
cm = confusion_matrix(y_test,y_pred)
dis = ConfusionMatrixDisplay(confusion_matrix = cm,display_labels = ['Bad','Average','Good'])
dis.plot(cmap = 'Reds')
plt.title("Confusion Matrix")
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Wine Quality Confusion Matrix')
plt.show()

quality_labels, counts = np.unique(y_test, return_counts=True)
plt.figure()  # Create a new figure for the second plot
plt.bar(quality_labels, counts, align='center', alpha=0.7)
plt.xticks(quality_labels, ['Bad', 'Average', 'Good'])
plt.ylabel('Number of Wines')
plt.title('Distribution of Wine Quality Predictions')
plt.show()